<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">

  <title>
    <%= title %>
  </title>

  <!-- Bootstrap CSS -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" />
  <!-- Bootstrap Icons -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.js"></script>

  <!-- Custom styles -->
  <link rel="stylesheet" href="/css/styles.css">
</head>

<body>
  <!-- Time & Date Header -->
  <div class="time-date-header">
    <h1 id="time-display" class="display-3"></h1>
    <h5 id="date-display" class="text-light"></h5>
  </div>

  <!-- Main Content (filters and dashboard) -->
  <div class="content">
    <!-- Plan Filter Buttons -->
    <div class="profile-switcher my-3">
      <button class="filter-btn filter-all active" data-plan="all"
        onclick="filterContent('all', 'plan', this)">All</button>


      <button class="filter-btn filter-work" data-plan="work"
        onclick="filterContent('work', 'plan', this)">Work</button>

      <button class="filter-btn filter-school" data-plan="school"
        onclick="filterContent('school', 'plan', this)">School</button>

      <button class="filter-btn filter-personal" data-plan="personal"
        onclick="filterContent('personal', 'plan', this)">Personal</button>


      <button class="filter-btn filter-refresh" onclick="location.reload()">
        <i class="bi bi-arrow-clockwise"></i> Refresh
      </button>
    </div>
<!-- Dashboard Sections -->
<div class="dashboard">
  <!-- Task Section Wrapper (Loads Tasks Dynamically) -->
  <div id="task-container">
    <%- include("partials/tasks", { tasks: tasks, planBuckets: planBuckets || {} }) %>
  </div>

  <!-- Schedule Partial -->
  <%- include("partials/schedule", { calendars: calendars, calendarEvents: calendarEvents }) %>

  <!-- Calendar Partial -->
  <%- include("partials/calendar", { sortedDays: sortedDays, eventsByDay: eventsByDay }) %>

  <!-- Goals Partial -->
  <%- include("partials/goals") %>
</div>



  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function () {
      console.log("🚀 Page Loaded: Setting Defaults...");

      // Ensure Plan defaults to "All"
      let defaultPlanButton = document.querySelector(".filter-btn.filter-all");
      defaultPlanButton.classList.add("active");

      // Ensure Bucket defaults to "All"
      let defaultBucketButton = document.querySelector(".bucket-filter-button[data-bucket='all']");
      if (defaultBucketButton) {
        defaultBucketButton.classList.add("active");
      }

      // Wait for DOM to be fully rendered, then apply filtering in the correct order
      setTimeout(() => {
        let selectedPlan = "all";
        let selectedBucket = "all";
        updateBucketFilterButtons(selectedPlan);
        updateScheduleFilter(selectedPlan);
        updateTaskVisibility(selectedPlan, selectedBucket);

        console.log(`✅ Defaults Set: Plan = ${selectedPlan}, Bucket = ${selectedBucket}`);
      }, 100);
    });
    function filterContent(filterValue, dimension, btn) {
    let selectedPlan = document.querySelector('.filter-btn.active')?.getAttribute('data-plan') || 'all';
    let selectedBucket = document.querySelector('.bucket-filter-button.active')?.getAttribute('data-bucket') || 'all';

    console.log(`🎯 Filter Applied: Dimension = ${dimension}, Filter Value = ${filterValue}`);
    console.log(`🔍 Current Selected Plan = ${selectedPlan}, Selected Bucket = ${selectedBucket}`);

    if (dimension === 'plan') {
        console.log(`🎯 Plan Selected: ${filterValue}`);

        // Reset all Plan buttons and set the active one
        document.querySelectorAll('.filter-btn').forEach(button => button.classList.remove('active'));
        btn.classList.add('active');
        selectedPlan = filterValue;

        // Reset bucket selection to "All" when switching plans
        document.querySelectorAll('.bucket-filter-button').forEach(button => button.classList.remove('active'));
        document.querySelector('.bucket-filter-button[data-bucket="all"]')?.classList.add('active');

        selectedBucket = "all";

        console.log(`🔄 Resetting Bucket to "All" after selecting Plan: ${selectedPlan}`);

        // Update everything in correct order
        updateBucketFilterButtons(selectedPlan);
        updateScheduleFilter(selectedPlan);
        updateCalendarFilter(selectedPlan);
        updateGoalsFilter(selectedPlan);
        updateTaskVisibility(selectedPlan, selectedBucket);
    } 
    else if (dimension === 'bucket') {
        console.log(`🎯 Bucket Selected: ${filterValue}`);

        // Set the selected bucket
        document.querySelectorAll('.bucket-filter-button').forEach(button => button.classList.remove('active'));
        btn.classList.add('active');
        selectedBucket = filterValue;

        console.log(`🔄 Updating Tasks and Schedule for Plan = ${selectedPlan}, Bucket = ${selectedBucket}`);

        // Now update everything in correct order
        updateScheduleFilter(selectedPlan);
        updateCalendarFilter(selectedPlan);
        updateGoalsFilter(selectedPlan);
        updateTaskVisibility(selectedPlan, selectedBucket);
    }

    console.log(`✅ After Selection: Plan = ${selectedPlan}, Bucket = ${selectedBucket}`);
}

    function updateBucketFilterButtons(selectedPlan) {
      console.log(`🔄 Updating Buckets for Plan: ${selectedPlan}`);
      const availableBuckets = new Map();

      // Identify buckets that contain visible tasks for the selected Plan
      document.querySelectorAll('.task-section').forEach(task => {
        const bucket = task.getAttribute('data-bucket');
        const planType = task.getAttribute('data-task-type');

        if ((selectedPlan === 'all' || planType === selectedPlan) && bucket) {
          if (!availableBuckets.has(bucket)) {
            availableBuckets.set(bucket, 1);
          } else {
            availableBuckets.set(bucket, availableBuckets.get(bucket) + 1);
          }
        }
      });

      let anyVisibleBucket = false;

      document.querySelectorAll('.bucket-filter-button').forEach(btn => {
        const bucketFilterValue = btn.getAttribute('data-bucket');
        const bucketPlanType = btn.getAttribute('data-plan-type');

        // Only show buckets that belong to the selected Plan or "All"
        let shouldShow = selectedPlan === 'all' || bucketPlanType === selectedPlan;

        if (shouldShow) {
          btn.classList.remove('hidden');
          btn.style.display = "inline-block"; // Ensure buttons are properly displayed
          anyVisibleBucket = true;
        } else {
          btn.classList.add('hidden');
          btn.style.display = "none"; // Completely remove hidden buttons
        }
      });

      // Ensure bucket switcher is visible only if there are available buckets
      const bucketSwitcher = document.querySelector('.bucket-switcher');
      bucketSwitcher.style.display = anyVisibleBucket ? 'flex' : 'none';

      console.log(`✅ Buckets Updated for Plan: ${selectedPlan}, Visible Buckets:`, Array.from(availableBuckets.keys()));
    }
    function updateTaskVisibility(selectedPlan, selectedBucket) {
    console.log(`🔄 Updating Tasks: Plan = ${selectedPlan}, Bucket = ${selectedBucket}`);

    let anyVisibleTask = false;

    // Select task sections from both "Today's Tasks" and "Next 3 Days Tasks"
    document.querySelectorAll('.task-section').forEach(task => {
        let taskPlan = (task.getAttribute('data-task-type') || "").trim().toLowerCase();
        let taskBucket = (task.getAttribute('data-bucket') || "").trim().toLowerCase();
        let planMatch = selectedPlan.trim().toLowerCase();
        let bucketMatch = selectedBucket.trim().toLowerCase();

        if (!taskPlan || !taskBucket) {
            console.warn(`⚠ Task missing attributes: ${task.innerText}`);
            return;
        }

        console.log(`📝 Checking Task: ${task.innerText} | Plan: ${taskPlan} | Bucket: ${taskBucket}`);

        // Ensure "All" buckets show all tasks instead of hiding them
        let showTask = (planMatch === "all" || taskPlan === planMatch) &&
            (bucketMatch === "all" || taskBucket === bucketMatch);

        if (showTask) {
            console.log(`✅ Showing Task: ${task.innerText}`);
            task.classList.remove('hidden');
            task.style.display = "flex";  // Ensure visible tasks are displayed
            anyVisibleTask = true;
        } else {
            console.log(`❌ Hiding Task: ${task.innerText}`);
            task.classList.add('hidden');
            task.style.display = "none";  // Fully hide invalid tasks
        }
    });

    // Select task containers from both "Today's Tasks" and "Next 3 Days Tasks"
    let taskContainers = document.querySelectorAll('.card');
    let emptyMessage = document.querySelector('#no-tasks-message');

    if (!anyVisibleTask) {
        // No tasks found, show "No tasks" message
        if (!emptyMessage) {
            emptyMessage = document.createElement('div');
            emptyMessage.id = "no-tasks-message";
            emptyMessage.innerText = "There are no tasks in this bucket.";
            emptyMessage.style.textAlign = "center";
            emptyMessage.style.padding = "10px";
            emptyMessage.style.color = "#ccc";
            taskContainers.forEach(container => container.appendChild(emptyMessage));
        }
        emptyMessage.style.display = "block";
    } else {
        // Tasks exist, hide the "No tasks" message
        if (emptyMessage) {
            emptyMessage.style.display = "none";
        }
    }

    // Ensure the task containers remain visible
    taskContainers.forEach(container => container.style.display = "block");

    console.log(`✅ Final Task Visibility: Plan = ${selectedPlan}, Bucket = ${selectedBucket}, Any Visible: ${anyVisibleTask}`);
}


    function updateScheduleFilter(selectedPlan) {
      console.log(`🔄 Updating Schedule for Plan: ${selectedPlan}`);

      let anyVisibleEvent = false;

      document.querySelectorAll('.schedule-event').forEach(eventElem => {
        const calendarType = eventElem.getAttribute('data-calendar-type');
        let shouldShow = selectedPlan === 'all' || calendarType === selectedPlan;

        if (shouldShow) {
          eventElem.classList.remove('hidden');
          eventElem.style.display = "flex"; // Ensure visible schedules are displayed
          anyVisibleEvent = true;
        } else {
          eventElem.classList.add('hidden');
          eventElem.style.display = "none"; // Completely remove hidden schedules
        }
      });

      document.querySelectorAll('.schedule-day-group').forEach(group => {
        const events = group.querySelectorAll('.schedule-event:not(.hidden)');
        group.style.display = events.length > 0 ? 'block' : 'none';
      });

      // Ensure the schedule container is visible if events exist
      let scheduleContainer = document.querySelector('.schedule-card');
      if (scheduleContainer) {
        scheduleContainer.style.display = anyVisibleEvent ? 'block' : 'none';
      }

      console.log(`✅ Schedule Updated for Plan: ${selectedPlan}, Any Visible Events: ${anyVisibleEvent}`);
    }

    function updateCalendarFilter(selectedPlan) {
    console.log(`🔄 Filtering Calendar Events for Plan: ${selectedPlan}`);

    document.querySelectorAll('.calendar-event').forEach(event => {
        let eventPlanType = event.getAttribute('data-plan-type');

        let shouldShow = selectedPlan === "all" || eventPlanType === selectedPlan;

        if (shouldShow) {
            event.classList.remove('hidden');
            event.style.display = "flex"; // Ensure visibility
        } else {
            event.classList.add('hidden');
            event.style.display = "none"; // Hide non-matching events
        }
    });

    console.log(`✅ Calendar Events Updated for Plan: ${selectedPlan}`);
}


function updateGoalsFilter(selectedPlan) {
    console.log(`🔄 Filtering Goals for Plan: ${selectedPlan}`);

    document.querySelectorAll('.goal-item').forEach(goal => {
        let goalPlanType = goal.getAttribute('data-plan-type');

        let shouldShow = selectedPlan === "all" || goalPlanType === selectedPlan;
        goal.classList.toggle('hidden', !shouldShow);
    });

    console.log(`✅ Goals Updated for Plan: ${selectedPlan}`);
}


  </script>
  <script>
    function switchTasks(view) {
        console.log(`🔄 Switching Tasks View to: ${view}`);
        fetch(`/partials/${view}`)
          .then(response => response.text())
          .then(html => {
              document.getElementById('task-container').innerHTML = html;
          })
          .catch(error => console.error("Error loading tasks view:", error));
    }
    </script>
    

  <!-- Bootstrap JS -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
</body>

</html>